@page "/Test/TestList"
@layout NavMenuAdmin
@using Syncfusion.Blazor.DropDowns
@using CamcoTrainingSimple.Data
@using CamcoTrainingSimple.Data.Models
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Blazored.Toast.Services.IToastService toastService

<h3>Test</h3>
<small>Add as many Test as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="Test/createTest"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (developers == null)
{
<text>Loading...</text> }

            else
            {
<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Code</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (tTest dev in developers)
        {
            <tr>
                <td>@dev.Test_Id</td>
                <td>@dev.TestCode</td>
                <td>@dev.TestDescription</td>
                <td>
                    @*<a class="btn btn-success" href="developer/edit/@dev.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(dev.Id))">Delete</button>*@
                </td>
            </tr>
        }
    </tbody>
</table>}
@code { private List<tTest> developers;
            protected override async Task OnInitializedAsync()
            {
                await using (var db = new TrainingDbContext())
                {
                    developers = db.tTests.ToList();
                }
                //async Task Delete(int developerId)
                //{
                //    var dev = developers.First(x => x.Id == developerId);
                //    if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {dev.FirstName}'s ({dev.Id}) Record?"))
                //    {
                //        await client.DeleteAsync($"api/developer/{developerId}");
                //        await OnInitializedAsync();
                //    }
                //}
            }
}