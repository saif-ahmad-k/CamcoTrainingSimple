@page "/Category/CreateCategory"
@layout NavMenuAdmin
@using Syncfusion.Blazor.DropDowns
@using CamcoTrainingSimple.Data
@using CamcoTrainingSimple.Data.Models
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Blazored.Toast.Services.IToastService toastService

<header>
    <h1 style="text-align: center">Create New Category</h1>
</header>

<div class="container-fluid p-3" style="background-color:white; border: 2px solid black">
    <EditForm Model="@atTestInfo" id="editForm" OnValidSubmit="@HandleValidSubmit" Context="mainContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @*<div class="row">
                <div class="col-lg-12 control-section">
                    <h4 for="datetimeopen">Date/Time Open</h4>
                    <div class="control_wrapper">
                        <h3>@atTestInfo.DateTimeOpen.ToString()</h3>
                    </div>
                </div>
            </div>*@


        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="Name" class="control-label">Name</label>
                    <input for="Name" class="form-control" @bind="Name" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="Code" class="control-label">Code</label>
                    <input for="Code" class="form-control" @bind="Code" />
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-success" type="submit">Submit</button>
        </div>
    </EditForm>
</div>

<!--<SfSpinner @ref="SpinnerObj" Target="#editForm">
</SfSpinner>-->

@code { private bool IsSubmitted = false;
    private NewTestDetails atTestInfo = new NewTestDetails();
    public String Name { get; set; }
    //[Required]
    public string Code { get; set; }

    SfSpinner SpinnerObj;
    private string Target { get; set; } = "#editForm";

    private string[] _cssTypes = new string[] { "e-toast-warning", "e-toast-success", "e-toast-danger", "e-toast-info" };


    protected override async Task OnInitializedAsync()
    {
        //atTestInfo.Priority = 5;

    }

    //public void TestChanged()
    //{
    //    using (var db = new TrainingDbContext())
    //    {
    //        atTestInfo.TestId = db.MaintenanceMasterEquipmentList.Where(a => a.EquipmentStatus == "ACTIVE" && (a.Location == atTestInfo.Location || a.Location == "CAMCO") && a.IsActive).OrderBy(a => a.EquipmentBrassTag).ToList();
    //    }
    //}

    public async void HandleValidSubmit()
    {
        try
        {
            if (IsSubmitted == false)
            {
                IsSubmitted = true;
                tCategory saveData;
                //SpinnerObj.ShowSpinner(Target);
                await using (var db = new TrainingDbContext())
                {
                    saveData = new tCategory
                    {
                        Name = Name,
                        Code = Code,
                        CreatedDate = DateTime.Now,
                    };
                    db.tCategories.Add(saveData);

                    db.SaveChanges();
                }


                toastService.ShowSuccess("Successfully submitted Work Order!", "Successful Submit");
                navigationManager.NavigateTo($"/Category/categoryList");
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Error submitting Work Order!", "Failed Submit");
            IsSubmitted = false;
        }
        //SpinnerObj.HideSpinner(Target);
    }

    public partial class NewTestDetails
    {
        //[Required]

        //[Required]
        public String Name { get; set; }
        //[Required]
        public string Code { get; set; }

    } }