@page "/TestAttempt/SelectTest"

@using Syncfusion.Blazor.DropDowns
@using CamcoTrainingSimple.Data
@using CamcoTrainingSimple.Data.Models
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Blazored.Toast.Services.IToastService toastService

<header>
    <h1 style="text-align: center">Attempt new Test</h1>
</header>

<div class="container-fluid p-3" style="background-color:white; border: 2px solid black">
    <EditForm Model="@atTestInfo" id="editForm" OnValidSubmit="@HandleValidSubmit" Context="mainContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @*<div class="row">
            <div class="col-lg-12 control-section">
                <h4 for="datetimeopen">Date/Time Open</h4>
                <div class="control_wrapper">
                    <h3>@atTestInfo.DateTimeOpen.ToString()</h3>
                </div>
            </div>
        </div>*@
        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="TestId" class="control-label">Test</label>
                    <select class="form-control" @onchange="TestClicked">
                        <option value="0">-- Select Test --</option>
                        @if (TestsList != null)
                        {
        @foreach (var country in TestsList)
        {
    <option value="@country.Test_Id">@country.TestName</option>
}}
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="CategoryId" class="control-label">Employees</label>
                    <select class="form-control" @onchange="EmpClicked">
                        <option value="0">-- Select Employees --</option>
                        @if (EmployeesList != null)
                        {
                            @foreach (var Employee in EmployeesList)
                            {
                                <option value="@Employee.Employee_Id">@Employee.EmployeeName</option>

                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="CategoryId" class="control-label">Interviewer</label>
                    <select class="form-control" @onchange="InterviewerClicked">
                        <option value="0">-- Select Interviewer --</option>
                        @if (InterviewerList != null)
                        {
                            @foreach (var Interviewer in InterviewerList)
                            {
                                <option value="@Interviewer.InterviewerId">@Interviewer.FirstName</option>

                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-success" type="submit">Submit</button>
        </div>
    </EditForm>
</div>

<!--<SfSpinner @ref="SpinnerObj" Target="#editForm">
</SfSpinner>-->

@code { private bool IsSubmitted = false;
    private NewTestDetails atTestInfo = new NewTestDetails();
    private List<tTest>
    TestsList;
    private List<tEmployee>
        EmployeesList;
    private List<tInterviewer>
        InterviewerList;
    SfSpinner SpinnerObj;
    private string Target { get; set; } = "#editForm";

    private string[] _cssTypes = new string[] { "e-toast-warning", "e-toast-success", "e-toast-danger", "e-toast-info" };

    void TestClicked(ChangeEventArgs clickedEvent)
    {
        atTestInfo.TestId = clickedEvent.Value.ToString().ToInteger();
    }
    void EmpClicked(ChangeEventArgs clickedEvent)
    {
        atTestInfo.EmployeeId = clickedEvent.Value.ToString().ToInteger();
    }
    void InterviewerClicked(ChangeEventArgs clickedEvent)
    {
        atTestInfo.InterviewerId = clickedEvent.Value.ToString().ToInteger();
    }

    protected override async Task OnInitializedAsync()
    {
        //atTestInfo.Priority = 5;
        await using (var db = new TrainingDbContext())
        {
            TestsList = db.tTests.OrderBy(a => a.TestName).ToList();
            EmployeesList = db.tEmployees.OrderBy(a => a.EmployeeName).ToList();
            InterviewerList = db.tInterviewers.OrderBy(a => a.FirstName).ToList();
        }
    }

    //public void TestChanged()
    //{
    //    using (var db = new TrainingDbContext())
    //    {
    //        atTestInfo.TestId = db.MaintenanceMasterEquipmentList.Where(a => a.EquipmentStatus == "ACTIVE" && (a.Location == atTestInfo.Location || a.Location == "CAMCO") && a.IsActive).OrderBy(a => a.EquipmentBrassTag).ToList();
    //    }
    //}

    public async void HandleValidSubmit()
    {
        try
        {
            if (IsSubmitted == false)
            {
                IsSubmitted = true;
                tAttemptedTestInfo saveData;
                //SpinnerObj.ShowSpinner(Target);
                await using (var db = new TrainingDbContext())
                {
                    saveData = new tAttemptedTestInfo
                    {
                        EmployeeId = atTestInfo.EmployeeId,
                        InterviewerId = atTestInfo.InterviewerId,
                        TestId = atTestInfo.TestId
                    };
                    db.tAttemptedTestInfoes.Add(saveData);

                    db.SaveChanges();
                }


                toastService.ShowSuccess("Successfully submitted Work Order!", "Successful Submit");
                navigationManager.NavigateTo($"/TestAttempt/AttemptTest");
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Error submitting Work Order!", "Failed Submit");
            IsSubmitted = false;
        }
        //SpinnerObj.HideSpinner(Target);
    }

    public partial class NewTestDetails
    {
        //[Required]
        public int? InterviewerId { get; set; }
        //[Required]
        public int? EmployeeId { get; set; }
        //[Required]
        public int? TestId { get; set; }

    } }