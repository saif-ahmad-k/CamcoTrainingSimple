@page "/Traning/CreateTraning"
@layout NavMenuAdmin

@using Syncfusion.Blazor.DropDowns
@using CamcoTrainingSimple.Data
@using CamcoTrainingSimple.Data.Models
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Blazored.Toast.Services.IToastService toastService

<header>
    <h1 style="text-align: center">Create New Traning</h1>
</header>

<div class="container-fluid p-3" style="background-color:white; border: 2px solid black">
    <EditForm Model="@atTestInfo" id="editForm" OnValidSubmit="@HandleValidSubmit" Context="mainContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @*<div class="row">
            <div class="col-lg-12 control-section">
                <h4 for="datetimeopen">Date/Time Open</h4>
                <div class="control_wrapper">
                    <h3>@atTestInfo.DateTimeOpen.ToString()</h3>
                </div>
            </div>
        </div>*@

        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="Code" class="control-label">Code</label>
                    <input for="Code" class="form-control" @bind="Code" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="Name" class="control-label">Description</label>
                    <input for="Name" class="form-control" @bind="Description" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="CategoryId" class="control-label">Chapter</label>
                    <select class="form-control" @onchange="InterviewerClicked">
                        <option value="0">-- Select Chapter --</option>
                        @if (Chapter != null)
                        {
        @foreach (var Employee in Chapter)
        {
    <option value="@Employee.CategoryId">@Employee.Name</option>
}}
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="Category" class="control-label">Category</label>
                    <select class="form-control" @onchange="CategoryClicked">
                        <option value="0">-- Select Category --</option>
                        @if (Category != null)
                        {
        @foreach (var Category in Category)
        {
    <option value="@Category.Id">@Category.Name</option>
}}
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 control-section">
                <div class="control_wrapper">
                    <label for="Employee_Id" class="control-label">Posted By</label>
                    <select class="form-control" @onchange="EmployeeClicked">
                        <option value="0">-- Select Emloyee --</option>
                        @if (Employee != null)
                        {
        @foreach (var Employee in Employee)
        {
    <option value="@Employee.Employee_Id">@Employee.EmployeeName</option>}}
                    </select>
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-success" type="submit">Submit</button>
        </div>
    </EditForm>
</div>

<!--<SfSpinner @ref="SpinnerObj" Target="#editForm">
</SfSpinner>-->

@code { private bool IsSubmitted = false;
    private NewTestDetails atTestInfo = new NewTestDetails();
    public String Description { get; set; }
    private List<tChapter> Chapter;
    private List<tCategory> Category;
    private List<tEmployee> Employee;
    //[Required]
    public string Code { get; set; }

    SfSpinner SpinnerObj;
    private string Target { get; set; } = "#editForm";

    private string[] _cssTypes = new string[] { "e-toast-warning", "e-toast-success", "e-toast-danger", "e-toast-info" };


    protected override async Task OnInitializedAsync()
    {
        await using (var db = new TrainingDbContext())
        {
            Chapter = db.tChapters.ToList();
            Category = db.tCategories.ToList();
            Employee = db.tEmployees.ToList();
            //atTestInfo.Priority = 5;
        }

    }
    void InterviewerClicked(ChangeEventArgs clickedEvent)
    {
        atTestInfo.InterviewerId = clickedEvent.Value.ToString().ToInteger();
    }
    void EmployeeClicked(ChangeEventArgs clickedEvent)
    {
        atTestInfo.EmpId = clickedEvent.Value.ToString().ToInteger();
    }
    void CategoryClicked(ChangeEventArgs clickedEvent)
    {
        atTestInfo.CategoryId = clickedEvent.Value.ToString().ToInteger();
    }

    //public void TestChanged()
    //{
    //    using (var db = new TrainingDbContext())
    //    {
    //        atTestInfo.TestId = db.MaintenanceMasterEquipmentList.Where(a => a.EquipmentStatus == "ACTIVE" && (a.Location == atTestInfo.Location || a.Location == "CAMCO") && a.IsActive).OrderBy(a => a.EquipmentBrassTag).ToList();
    //    }
    //}

    public async void HandleValidSubmit()
    {
        try
        {
            if (IsSubmitted == false)
            {
                IsSubmitted = true;
                tTraining saveData;
                //SpinnerObj.ShowSpinner(Target);
                await using (var db = new TrainingDbContext())
                {
                    saveData = new tTraining
                    {
                        TrainingDescription = Description,
                        TrainingCode = Code,
                        ChapterId = atTestInfo.InterviewerId,
                        CategoryId = atTestInfo.CategoryId,
                        CreatedBy = atTestInfo.EmpId,
                        CreatedDate = DateTime.Now,
                    };
                    db.tTrainings.Add(saveData);

                    db.SaveChanges();
                }


                toastService.ShowSuccess("Successfully submitted Work Order!", "Successful Submit");
                navigationManager.NavigateTo($"/Traning/TraningList");
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Error submitting Work Order!", "Failed Submit");
            IsSubmitted = false;
        }
        //SpinnerObj.HideSpinner(Target);
    }

    public partial class NewTestDetails
    {
        //[Required]
        public int? InterviewerId { get; set; }
        public int? EmpId { get; set; }
        public int? CategoryId { get; set; }
        //[Required]


    } }